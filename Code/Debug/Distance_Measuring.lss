
Distance_Measuring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000207c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000207c  00002110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800078  00800078  00002128  2**0
                  ALLOC
  3 .stab         00001a28  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b23  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004673  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000047d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000069a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00008e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <main>
      8a:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_reg2.h"

u8 SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	28 97       	sbiw	r28, 0x08	; 8
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Error =0;
     cb8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= PIN7)
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <SetPinDirection+0x24>
     cc0:	f5 c0       	rjmp	.+490    	; 0xeac <SetPinDirection+0x20e>
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	88 30       	cpi	r24, 0x08	; 8
     cc6:	08 f0       	brcs	.+2      	; 0xcca <SetPinDirection+0x2c>
     cc8:	f1 c0       	rjmp	.+482    	; 0xeac <SetPinDirection+0x20e>
	{
		if(Copy_u8Direction ==INPUT )
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	88 23       	and	r24, r24
     cce:	09 f0       	breq	.+2      	; 0xcd2 <SetPinDirection+0x34>
     cd0:	77 c0       	rjmp	.+238    	; 0xdc0 <SetPinDirection+0x122>
		{
			switch(Copy_u8Port)
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	38 87       	std	Y+8, r19	; 0x08
     cda:	2f 83       	std	Y+7, r18	; 0x07
     cdc:	8f 81       	ldd	r24, Y+7	; 0x07
     cde:	98 85       	ldd	r25, Y+8	; 0x08
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	91 05       	cpc	r25, r1
     ce4:	59 f1       	breq	.+86     	; 0xd3c <SetPinDirection+0x9e>
     ce6:	2f 81       	ldd	r18, Y+7	; 0x07
     ce8:	38 85       	ldd	r19, Y+8	; 0x08
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	2c f4       	brge	.+10     	; 0xcfa <SetPinDirection+0x5c>
     cf0:	8f 81       	ldd	r24, Y+7	; 0x07
     cf2:	98 85       	ldd	r25, Y+8	; 0x08
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f0       	breq	.+26     	; 0xd12 <SetPinDirection+0x74>
     cf8:	60 c0       	rjmp	.+192    	; 0xdba <SetPinDirection+0x11c>
     cfa:	2f 81       	ldd	r18, Y+7	; 0x07
     cfc:	38 85       	ldd	r19, Y+8	; 0x08
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	89 f1       	breq	.+98     	; 0xd66 <SetPinDirection+0xc8>
     d04:	8f 81       	ldd	r24, Y+7	; 0x07
     d06:	98 85       	ldd	r25, Y+8	; 0x08
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <SetPinDirection+0x72>
     d0e:	40 c0       	rjmp	.+128    	; 0xd90 <SetPinDirection+0xf2>
     d10:	54 c0       	rjmp	.+168    	; 0xdba <SetPinDirection+0x11c>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
     d12:	aa e3       	ldi	r26, 0x3A	; 58
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ea e3       	ldi	r30, 0x3A	; 58
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <SetPinDirection+0x92>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <SetPinDirection+0x8e>
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	ba c0       	rjmp	.+372    	; 0xeb0 <SetPinDirection+0x212>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <SetPinDirection+0xbc>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <SetPinDirection+0xb8>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	a5 c0       	rjmp	.+330    	; 0xeb0 <SetPinDirection+0x212>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
     d66:	a4 e3       	ldi	r26, 0x34	; 52
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e4 e3       	ldi	r30, 0x34	; 52
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <SetPinDirection+0xe6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <SetPinDirection+0xe2>
     d88:	80 95       	com	r24
     d8a:	84 23       	and	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	90 c0       	rjmp	.+288    	; 0xeb0 <SetPinDirection+0x212>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
     d90:	a1 e3       	ldi	r26, 0x31	; 49
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e1 e3       	ldi	r30, 0x31	; 49
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <SetPinDirection+0x110>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <SetPinDirection+0x10c>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	7b c0       	rjmp	.+246    	; 0xeb0 <SetPinDirection+0x212>
			default: Local_Error =1; break;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	78 c0       	rjmp	.+240    	; 0xeb0 <SetPinDirection+0x212>

			}

		}
		else if (Copy_u8Direction ==OUTPUT)
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <SetPinDirection+0x12a>
     dc6:	74 c0       	rjmp	.+232    	; 0xeb0 <SetPinDirection+0x212>
		{
			switch(Copy_u8Port)
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3e 83       	std	Y+6, r19	; 0x06
     dd0:	2d 83       	std	Y+5, r18	; 0x05
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	49 f1       	breq	.+82     	; 0xe2e <SetPinDirection+0x190>
     ddc:	2d 81       	ldd	r18, Y+5	; 0x05
     dde:	3e 81       	ldd	r19, Y+6	; 0x06
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <SetPinDirection+0x152>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	61 f0       	breq	.+24     	; 0xe06 <SetPinDirection+0x168>
     dee:	5b c0       	rjmp	.+182    	; 0xea6 <SetPinDirection+0x208>
     df0:	2d 81       	ldd	r18, Y+5	; 0x05
     df2:	3e 81       	ldd	r19, Y+6	; 0x06
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	71 f1       	breq	.+92     	; 0xe56 <SetPinDirection+0x1b8>
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	91 05       	cpc	r25, r1
     e02:	e9 f1       	breq	.+122    	; 0xe7e <SetPinDirection+0x1e0>
     e04:	50 c0       	rjmp	.+160    	; 0xea6 <SetPinDirection+0x208>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <SetPinDirection+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <SetPinDirection+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	41 c0       	rjmp	.+130    	; 0xeb0 <SetPinDirection+0x212>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
     e2e:	a7 e3       	ldi	r26, 0x37	; 55
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e7 e3       	ldi	r30, 0x37	; 55
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <SetPinDirection+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <SetPinDirection+0x1aa>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	2d c0       	rjmp	.+90     	; 0xeb0 <SetPinDirection+0x212>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
     e56:	a4 e3       	ldi	r26, 0x34	; 52
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e4 e3       	ldi	r30, 0x34	; 52
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <SetPinDirection+0x1d6>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <SetPinDirection+0x1d2>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	19 c0       	rjmp	.+50     	; 0xeb0 <SetPinDirection+0x212>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
     e7e:	a1 e3       	ldi	r26, 0x31	; 49
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e1 e3       	ldi	r30, 0x31	; 49
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <SetPinDirection+0x1fe>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <SetPinDirection+0x1fa>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <SetPinDirection+0x212>
			default: Local_Error =1; break;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <SetPinDirection+0x212>
			}
		}
	}
		else
		{
			Local_Error =1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_Error;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01

}
     eb2:	28 96       	adiw	r28, 0x08	; 8
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <SetPortDirection>:

u8 SetPortDirection(u8 Copy_u8Port,u8 Copy_u8Value)
{ u8 Local_Error =0;
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <SetPortDirection+0x6>
     eca:	00 d0       	rcall	.+0      	; 0xecc <SetPortDirection+0x8>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	8a 83       	std	Y+2, r24	; 0x02
     ed4:	6b 83       	std	Y+3, r22	; 0x03
     ed6:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Port <= DIO_PORTD )
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	b0 f5       	brcc	.+108    	; 0xf4a <SetPortDirection+0x86>
{
	switch(Copy_u8Port)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3d 83       	std	Y+5, r19	; 0x05
     ee6:	2c 83       	std	Y+4, r18	; 0x04
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	d1 f0       	breq	.+52     	; 0xf26 <SetPortDirection+0x62>
     ef2:	2c 81       	ldd	r18, Y+4	; 0x04
     ef4:	3d 81       	ldd	r19, Y+5	; 0x05
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	2c f4       	brge	.+10     	; 0xf06 <SetPortDirection+0x42>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	61 f0       	breq	.+24     	; 0xf1c <SetPortDirection+0x58>
     f04:	1f c0       	rjmp	.+62     	; 0xf44 <SetPortDirection+0x80>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	81 f0       	breq	.+32     	; 0xf30 <SetPortDirection+0x6c>
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	91 05       	cpc	r25, r1
     f18:	81 f0       	breq	.+32     	; 0xf3a <SetPortDirection+0x76>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <SetPortDirection+0x80>
	{
	case DIO_PORTA : DDRA = Copy_u8Value; break;
     f1c:	ea e3       	ldi	r30, 0x3A	; 58
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	80 83       	st	Z, r24
     f24:	13 c0       	rjmp	.+38     	; 0xf4c <SetPortDirection+0x88>
	case DIO_PORTB : DDRB = Copy_u8Value; break;
     f26:	e7 e3       	ldi	r30, 0x37	; 55
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <SetPortDirection+0x88>
	case DIO_PORTC : DDRC = Copy_u8Value; break;
     f30:	e4 e3       	ldi	r30, 0x34	; 52
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 83       	st	Z, r24
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <SetPortDirection+0x88>
	case DIO_PORTD : DDRD = Copy_u8Value; break;
     f3a:	e1 e3       	ldi	r30, 0x31	; 49
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	80 83       	st	Z, r24
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <SetPortDirection+0x88>
	default: Local_Error =1; break;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <SetPortDirection+0x88>


}
else
{
	Local_Error =0;
     f4a:	19 82       	std	Y+1, r1	; 0x01
}
return Local_Error;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <SetPinValue>:
u8 SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	28 97       	sbiw	r28, 0x08	; 8
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	6b 83       	std	Y+3, r22	; 0x03
     f76:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Error =0;
     f78:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= PIN7)
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <SetPinValue+0x24>
     f80:	f5 c0       	rjmp	.+490    	; 0x116c <SetPinValue+0x20e>
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	08 f0       	brcs	.+2      	; 0xf8a <SetPinValue+0x2c>
     f88:	f1 c0       	rjmp	.+482    	; 0x116c <SetPinValue+0x20e>
	{
		if(Copy_u8Value ==HIGH)
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <SetPinValue+0x34>
     f90:	72 c0       	rjmp	.+228    	; 0x1076 <SetPinValue+0x118>
		{
			switch(Copy_u8Port)
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	38 87       	std	Y+8, r19	; 0x08
     f9a:	2f 83       	std	Y+7, r18	; 0x07
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	98 85       	ldd	r25, Y+8	; 0x08
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	49 f1       	breq	.+82     	; 0xff8 <SetPinValue+0x9a>
     fa6:	2f 81       	ldd	r18, Y+7	; 0x07
     fa8:	38 85       	ldd	r19, Y+8	; 0x08
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	2c f4       	brge	.+10     	; 0xfba <SetPinValue+0x5c>
     fb0:	8f 81       	ldd	r24, Y+7	; 0x07
     fb2:	98 85       	ldd	r25, Y+8	; 0x08
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <SetPinValue+0x72>
     fb8:	5b c0       	rjmp	.+182    	; 0x1070 <SetPinValue+0x112>
     fba:	2f 81       	ldd	r18, Y+7	; 0x07
     fbc:	38 85       	ldd	r19, Y+8	; 0x08
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	71 f1       	breq	.+92     	; 0x1020 <SetPinValue+0xc2>
     fc4:	8f 81       	ldd	r24, Y+7	; 0x07
     fc6:	98 85       	ldd	r25, Y+8	; 0x08
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	e9 f1       	breq	.+122    	; 0x1048 <SetPinValue+0xea>
     fce:	50 c0       	rjmp	.+160    	; 0x1070 <SetPinValue+0x112>
			{
			case DIO_PORTA : SET_BIT(PORTA ,Copy_u8Pin); break;
     fd0:	ab e3       	ldi	r26, 0x3B	; 59
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	eb e3       	ldi	r30, 0x3B	; 59
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <SetPinValue+0x90>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <SetPinValue+0x8c>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	bc c0       	rjmp	.+376    	; 0x1170 <SetPinValue+0x212>
			case DIO_PORTB : SET_BIT(PORTB ,Copy_u8Pin); break;
     ff8:	a8 e3       	ldi	r26, 0x38	; 56
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e8 e3       	ldi	r30, 0x38	; 56
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <SetPinValue+0xb8>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <SetPinValue+0xb4>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	a8 c0       	rjmp	.+336    	; 0x1170 <SetPinValue+0x212>
			case DIO_PORTC : SET_BIT(PORTC ,Copy_u8Pin); break;
    1020:	a5 e3       	ldi	r26, 0x35	; 53
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e3       	ldi	r30, 0x35	; 53
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <SetPinValue+0xe0>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <SetPinValue+0xdc>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	94 c0       	rjmp	.+296    	; 0x1170 <SetPinValue+0x212>
			case DIO_PORTD : SET_BIT(PORTD ,Copy_u8Pin); break;
    1048:	a2 e3       	ldi	r26, 0x32	; 50
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e2 e3       	ldi	r30, 0x32	; 50
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <SetPinValue+0x108>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <SetPinValue+0x104>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	80 c0       	rjmp	.+256    	; 0x1170 <SetPinValue+0x212>
			default : Local_Error =1; break;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	7d c0       	rjmp	.+250    	; 0x1170 <SetPinValue+0x212>
			}
		}
		else if(Copy_u8Value ==LOW)
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	88 23       	and	r24, r24
    107a:	09 f0       	breq	.+2      	; 0x107e <SetPinValue+0x120>
    107c:	79 c0       	rjmp	.+242    	; 0x1170 <SetPinValue+0x212>
		{switch(Copy_u8Port){
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3e 83       	std	Y+6, r19	; 0x06
    1086:	2d 83       	std	Y+5, r18	; 0x05
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	59 f1       	breq	.+86     	; 0x10e8 <SetPinValue+0x18a>
    1092:	2d 81       	ldd	r18, Y+5	; 0x05
    1094:	3e 81       	ldd	r19, Y+6	; 0x06
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <SetPinValue+0x148>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f0       	breq	.+26     	; 0x10be <SetPinValue+0x160>
    10a4:	60 c0       	rjmp	.+192    	; 0x1166 <SetPinValue+0x208>
    10a6:	2d 81       	ldd	r18, Y+5	; 0x05
    10a8:	3e 81       	ldd	r19, Y+6	; 0x06
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	89 f1       	breq	.+98     	; 0x1112 <SetPinValue+0x1b4>
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <SetPinValue+0x15e>
    10ba:	40 c0       	rjmp	.+128    	; 0x113c <SetPinValue+0x1de>
    10bc:	54 c0       	rjmp	.+168    	; 0x1166 <SetPinValue+0x208>
case DIO_PORTA : CLR_BIT(PORTA ,Copy_u8Pin); break;
    10be:	ab e3       	ldi	r26, 0x3B	; 59
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	eb e3       	ldi	r30, 0x3B	; 59
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <SetPinValue+0x17e>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <SetPinValue+0x17a>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	44 c0       	rjmp	.+136    	; 0x1170 <SetPinValue+0x212>
case DIO_PORTB : CLR_BIT(PORTB ,Copy_u8Pin); break;
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <SetPinValue+0x1a8>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <SetPinValue+0x1a4>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	2f c0       	rjmp	.+94     	; 0x1170 <SetPinValue+0x212>
case DIO_PORTC : CLR_BIT(PORTC ,Copy_u8Pin); break;
    1112:	a5 e3       	ldi	r26, 0x35	; 53
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e3       	ldi	r30, 0x35	; 53
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <SetPinValue+0x1d2>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <SetPinValue+0x1ce>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	1a c0       	rjmp	.+52     	; 0x1170 <SetPinValue+0x212>
case DIO_PORTD : CLR_BIT(PORTD ,Copy_u8Pin); break;
    113c:	a2 e3       	ldi	r26, 0x32	; 50
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <SetPinValue+0x1fc>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <SetPinValue+0x1f8>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <SetPinValue+0x212>
default : Local_Error=1; break;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <SetPinValue+0x212>
		}
		}
	}
	else
	{
		Local_Error =1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Error;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	28 96       	adiw	r28, 0x08	; 8
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <SetPortValue>:
u8 SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <SetPortValue+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <SetPortValue+0x8>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Error =0;
    1196:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port <= DIO_PORTD)
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	b0 f5       	brcc	.+108    	; 0x120a <SetPortValue+0x86>
	{


		switch(Copy_u8Port)
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3d 83       	std	Y+5, r19	; 0x05
    11a6:	2c 83       	std	Y+4, r18	; 0x04
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	91 05       	cpc	r25, r1
    11b0:	d1 f0       	breq	.+52     	; 0x11e6 <SetPortValue+0x62>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <SetPortValue+0x42>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	61 f0       	breq	.+24     	; 0x11dc <SetPortValue+0x58>
    11c4:	1f c0       	rjmp	.+62     	; 0x1204 <SetPortValue+0x80>
    11c6:	2c 81       	ldd	r18, Y+4	; 0x04
    11c8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <SetPortValue+0x6c>
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	91 05       	cpc	r25, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <SetPortValue+0x76>
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <SetPortValue+0x80>
		{
		case DIO_PORTA : PORTA = Copy_u8Value; break;
    11dc:	eb e3       	ldi	r30, 0x3B	; 59
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	80 83       	st	Z, r24
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <SetPortValue+0x8a>
		case DIO_PORTB : PORTB = Copy_u8Value; break;
    11e6:	e8 e3       	ldi	r30, 0x38	; 56
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	80 83       	st	Z, r24
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <SetPortValue+0x8a>
		case DIO_PORTC : PORTC = Copy_u8Value; break;
    11f0:	e5 e3       	ldi	r30, 0x35	; 53
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	80 83       	st	Z, r24
    11f8:	0a c0       	rjmp	.+20     	; 0x120e <SetPortValue+0x8a>
		case DIO_PORTD : PORTD = Copy_u8Value; break;
    11fa:	e2 e3       	ldi	r30, 0x32	; 50
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	80 83       	st	Z, r24
    1202:	05 c0       	rjmp	.+10     	; 0x120e <SetPortValue+0x8a>
		default : Local_Error =1; break;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	02 c0       	rjmp	.+4      	; 0x120e <SetPortValue+0x8a>
		}
	}

	else
	{
		Local_Error = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	89 83       	std	Y+1, r24	; 0x01
	}

		return Local_Error;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <LCD_Init>:
#include "DIO.h"
#include "LCD.h"
#include"util/delay.h"

void LCD_Init()
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	e8 97       	sbiw	r28, 0x38	; 56
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a8 e4       	ldi	r26, 0x48	; 72
    123a:	b2 e4       	ldi	r27, 0x42	; 66
    123c:	8d ab       	std	Y+53, r24	; 0x35
    123e:	9e ab       	std	Y+54, r25	; 0x36
    1240:	af ab       	std	Y+55, r26	; 0x37
    1242:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1244:	6d a9       	ldd	r22, Y+53	; 0x35
    1246:	7e a9       	ldd	r23, Y+54	; 0x36
    1248:	8f a9       	ldd	r24, Y+55	; 0x37
    124a:	98 ad       	ldd	r25, Y+56	; 0x38
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a e7       	ldi	r20, 0x7A	; 122
    1252:	53 e4       	ldi	r21, 0x43	; 67
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	89 ab       	std	Y+49, r24	; 0x31
    125e:	9a ab       	std	Y+50, r25	; 0x32
    1260:	ab ab       	std	Y+51, r26	; 0x33
    1262:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1264:	69 a9       	ldd	r22, Y+49	; 0x31
    1266:	7a a9       	ldd	r23, Y+50	; 0x32
    1268:	8b a9       	ldd	r24, Y+51	; 0x33
    126a:	9c a9       	ldd	r25, Y+52	; 0x34
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	2c f4       	brge	.+10     	; 0x1286 <LCD_Init+0x66>
		__ticks = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	98 ab       	std	Y+48, r25	; 0x30
    1282:	8f a7       	std	Y+47, r24	; 0x2f
    1284:	3f c0       	rjmp	.+126    	; 0x1304 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1286:	69 a9       	ldd	r22, Y+49	; 0x31
    1288:	7a a9       	ldd	r23, Y+50	; 0x32
    128a:	8b a9       	ldd	r24, Y+51	; 0x33
    128c:	9c a9       	ldd	r25, Y+52	; 0x34
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	4c f5       	brge	.+82     	; 0x12f0 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129e:	6d a9       	ldd	r22, Y+53	; 0x35
    12a0:	7e a9       	ldd	r23, Y+54	; 0x36
    12a2:	8f a9       	ldd	r24, Y+55	; 0x37
    12a4:	98 ad       	ldd	r25, Y+56	; 0x38
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	98 ab       	std	Y+48, r25	; 0x30
    12c4:	8f a7       	std	Y+47, r24	; 0x2f
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <LCD_Init+0xc6>
    12c8:	89 e1       	ldi	r24, 0x19	; 25
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e a7       	std	Y+46, r25	; 0x2e
    12ce:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    12d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <LCD_Init+0xb4>
    12d8:	9e a7       	std	Y+46, r25	; 0x2e
    12da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    12de:	98 a9       	ldd	r25, Y+48	; 0x30
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	98 ab       	std	Y+48, r25	; 0x30
    12e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e8:	98 a9       	ldd	r25, Y+48	; 0x30
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <LCD_Init+0xa8>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	69 a9       	ldd	r22, Y+49	; 0x31
    12f2:	7a a9       	ldd	r23, Y+50	; 0x32
    12f4:	8b a9       	ldd	r24, Y+51	; 0x33
    12f6:	9c a9       	ldd	r25, Y+52	; 0x34
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	98 ab       	std	Y+48, r25	; 0x30
    1302:	8f a7       	std	Y+47, r24	; 0x2f
    1304:	8f a5       	ldd	r24, Y+47	; 0x2f
    1306:	98 a9       	ldd	r25, Y+48	; 0x30
    1308:	9c a7       	std	Y+44, r25	; 0x2c
    130a:	8b a7       	std	Y+43, r24	; 0x2b
    130c:	8b a5       	ldd	r24, Y+43	; 0x2b
    130e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <LCD_Init+0xf0>
    1314:	9c a7       	std	Y+44, r25	; 0x2c
    1316:	8b a7       	std	Y+43, r24	; 0x2b
#if MODE == 8
	_delay_ms(50);

	/*function set command */
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1318:	88 e3       	ldi	r24, 0x38	; 56
    131a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_SendCommand>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e8       	ldi	r26, 0x80	; 128
    1324:	bf e3       	ldi	r27, 0x3F	; 63
    1326:	8f a3       	std	Y+39, r24	; 0x27
    1328:	98 a7       	std	Y+40, r25	; 0x28
    132a:	a9 a7       	std	Y+41, r26	; 0x29
    132c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132e:	6f a1       	ldd	r22, Y+39	; 0x27
    1330:	78 a5       	ldd	r23, Y+40	; 0x28
    1332:	89 a5       	ldd	r24, Y+41	; 0x29
    1334:	9a a5       	ldd	r25, Y+42	; 0x2a
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a e7       	ldi	r20, 0x7A	; 122
    133c:	53 e4       	ldi	r21, 0x43	; 67
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	8b a3       	std	Y+35, r24	; 0x23
    1348:	9c a3       	std	Y+36, r25	; 0x24
    134a:	ad a3       	std	Y+37, r26	; 0x25
    134c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    134e:	6b a1       	ldd	r22, Y+35	; 0x23
    1350:	7c a1       	ldd	r23, Y+36	; 0x24
    1352:	8d a1       	ldd	r24, Y+37	; 0x25
    1354:	9e a1       	ldd	r25, Y+38	; 0x26
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1362:	88 23       	and	r24, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <LCD_Init+0x150>
		__ticks = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9a a3       	std	Y+34, r25	; 0x22
    136c:	89 a3       	std	Y+33, r24	; 0x21
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    1370:	6b a1       	ldd	r22, Y+35	; 0x23
    1372:	7c a1       	ldd	r23, Y+36	; 0x24
    1374:	8d a1       	ldd	r24, Y+37	; 0x25
    1376:	9e a1       	ldd	r25, Y+38	; 0x26
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	4c f5       	brge	.+82     	; 0x13da <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	6f a1       	ldd	r22, Y+39	; 0x27
    138a:	78 a5       	ldd	r23, Y+40	; 0x28
    138c:	89 a5       	ldd	r24, Y+41	; 0x29
    138e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9a a3       	std	Y+34, r25	; 0x22
    13ae:	89 a3       	std	Y+33, r24	; 0x21
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <LCD_Init+0x1b0>
    13b2:	89 e1       	ldi	r24, 0x19	; 25
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	98 a3       	std	Y+32, r25	; 0x20
    13b8:	8f 8f       	std	Y+31, r24	; 0x1f
    13ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13bc:	98 a1       	ldd	r25, Y+32	; 0x20
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_Init+0x19e>
    13c2:	98 a3       	std	Y+32, r25	; 0x20
    13c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	89 a1       	ldd	r24, Y+33	; 0x21
    13c8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9a a3       	std	Y+34, r25	; 0x22
    13ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	89 a1       	ldd	r24, Y+33	; 0x21
    13d2:	9a a1       	ldd	r25, Y+34	; 0x22
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <LCD_Init+0x192>
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	6b a1       	ldd	r22, Y+35	; 0x23
    13dc:	7c a1       	ldd	r23, Y+36	; 0x24
    13de:	8d a1       	ldd	r24, Y+37	; 0x25
    13e0:	9e a1       	ldd	r25, Y+38	; 0x26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9a a3       	std	Y+34, r25	; 0x22
    13ec:	89 a3       	std	Y+33, r24	; 0x21
    13ee:	89 a1       	ldd	r24, Y+33	; 0x21
    13f0:	9a a1       	ldd	r25, Y+34	; 0x22
    13f2:	9e 8f       	std	Y+30, r25	; 0x1e
    13f4:	8d 8f       	std	Y+29, r24	; 0x1d
    13f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <LCD_Init+0x1da>
    13fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1400:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/*function display command*/
	LCD_SendCommand(LCD_CURSOR_OFF);
    1402:	8c e0       	ldi	r24, 0x0C	; 12
    1404:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_SendCommand>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a0 e8       	ldi	r26, 0x80	; 128
    140e:	bf e3       	ldi	r27, 0x3F	; 63
    1410:	89 8f       	std	Y+25, r24	; 0x19
    1412:	9a 8f       	std	Y+26, r25	; 0x1a
    1414:	ab 8f       	std	Y+27, r26	; 0x1b
    1416:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1418:	69 8d       	ldd	r22, Y+25	; 0x19
    141a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4a e7       	ldi	r20, 0x7A	; 122
    1426:	53 e4       	ldi	r21, 0x43	; 67
    1428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	8d 8b       	std	Y+21, r24	; 0x15
    1432:	9e 8b       	std	Y+22, r25	; 0x16
    1434:	af 8b       	std	Y+23, r26	; 0x17
    1436:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1438:	6d 89       	ldd	r22, Y+21	; 0x15
    143a:	7e 89       	ldd	r23, Y+22	; 0x16
    143c:	8f 89       	ldd	r24, Y+23	; 0x17
    143e:	98 8d       	ldd	r25, Y+24	; 0x18
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e8       	ldi	r20, 0x80	; 128
    1446:	5f e3       	ldi	r21, 0x3F	; 63
    1448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144c:	88 23       	and	r24, r24
    144e:	2c f4       	brge	.+10     	; 0x145a <LCD_Init+0x23a>
		__ticks = 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c 8b       	std	Y+20, r25	; 0x14
    1456:	8b 8b       	std	Y+19, r24	; 0x13
    1458:	3f c0       	rjmp	.+126    	; 0x14d8 <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    145a:	6d 89       	ldd	r22, Y+21	; 0x15
    145c:	7e 89       	ldd	r23, Y+22	; 0x16
    145e:	8f 89       	ldd	r24, Y+23	; 0x17
    1460:	98 8d       	ldd	r25, Y+24	; 0x18
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	4f e7       	ldi	r20, 0x7F	; 127
    1468:	57 e4       	ldi	r21, 0x47	; 71
    146a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146e:	18 16       	cp	r1, r24
    1470:	4c f5       	brge	.+82     	; 0x14c4 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	69 8d       	ldd	r22, Y+25	; 0x19
    1474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	9c 8b       	std	Y+20, r25	; 0x14
    1498:	8b 8b       	std	Y+19, r24	; 0x13
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <LCD_Init+0x29a>
    149c:	89 e1       	ldi	r24, 0x19	; 25
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9a 8b       	std	Y+18, r25	; 0x12
    14a2:	89 8b       	std	Y+17, r24	; 0x11
    14a4:	89 89       	ldd	r24, Y+17	; 0x11
    14a6:	9a 89       	ldd	r25, Y+18	; 0x12
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <LCD_Init+0x288>
    14ac:	9a 8b       	std	Y+18, r25	; 0x12
    14ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b0:	8b 89       	ldd	r24, Y+19	; 0x13
    14b2:	9c 89       	ldd	r25, Y+20	; 0x14
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	9c 8b       	std	Y+20, r25	; 0x14
    14b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ba:	8b 89       	ldd	r24, Y+19	; 0x13
    14bc:	9c 89       	ldd	r25, Y+20	; 0x14
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	69 f7       	brne	.-38     	; 0x149c <LCD_Init+0x27c>
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c4:	6d 89       	ldd	r22, Y+21	; 0x15
    14c6:	7e 89       	ldd	r23, Y+22	; 0x16
    14c8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ca:	98 8d       	ldd	r25, Y+24	; 0x18
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	9c 8b       	std	Y+20, r25	; 0x14
    14d6:	8b 8b       	std	Y+19, r24	; 0x13
    14d8:	8b 89       	ldd	r24, Y+19	; 0x13
    14da:	9c 89       	ldd	r25, Y+20	; 0x14
    14dc:	98 8b       	std	Y+16, r25	; 0x10
    14de:	8f 87       	std	Y+15, r24	; 0x0f
    14e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e2:	98 89       	ldd	r25, Y+16	; 0x10
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <LCD_Init+0x2c4>
    14e8:	98 8b       	std	Y+16, r25	; 0x10
    14ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/*display clear*/
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_SendCommand>
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e4       	ldi	r27, 0x40	; 64
    14fa:	8b 87       	std	Y+11, r24	; 0x0b
    14fc:	9c 87       	std	Y+12, r25	; 0x0c
    14fe:	ad 87       	std	Y+13, r26	; 0x0d
    1500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1502:	6b 85       	ldd	r22, Y+11	; 0x0b
    1504:	7c 85       	ldd	r23, Y+12	; 0x0c
    1506:	8d 85       	ldd	r24, Y+13	; 0x0d
    1508:	9e 85       	ldd	r25, Y+14	; 0x0e
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	4a e7       	ldi	r20, 0x7A	; 122
    1510:	53 e4       	ldi	r21, 0x43	; 67
    1512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	8f 83       	std	Y+7, r24	; 0x07
    151c:	98 87       	std	Y+8, r25	; 0x08
    151e:	a9 87       	std	Y+9, r26	; 0x09
    1520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1522:	6f 81       	ldd	r22, Y+7	; 0x07
    1524:	78 85       	ldd	r23, Y+8	; 0x08
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e8       	ldi	r20, 0x80	; 128
    1530:	5f e3       	ldi	r21, 0x3F	; 63
    1532:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1536:	88 23       	and	r24, r24
    1538:	2c f4       	brge	.+10     	; 0x1544 <LCD_Init+0x324>
		__ticks = 1;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	3f c0       	rjmp	.+126    	; 0x15c2 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    1544:	6f 81       	ldd	r22, Y+7	; 0x07
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	3f ef       	ldi	r19, 0xFF	; 255
    1550:	4f e7       	ldi	r20, 0x7F	; 127
    1552:	57 e4       	ldi	r21, 0x47	; 71
    1554:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1558:	18 16       	cp	r1, r24
    155a:	4c f5       	brge	.+82     	; 0x15ae <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155c:	6b 85       	ldd	r22, Y+11	; 0x0b
    155e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1560:	8d 85       	ldd	r24, Y+13	; 0x0d
    1562:	9e 85       	ldd	r25, Y+14	; 0x0e
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e2       	ldi	r20, 0x20	; 32
    156a:	51 e4       	ldi	r21, 0x41	; 65
    156c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	bc 01       	movw	r22, r24
    1576:	cd 01       	movw	r24, r26
    1578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	0f c0       	rjmp	.+30     	; 0x15a4 <LCD_Init+0x384>
    1586:	89 e1       	ldi	r24, 0x19	; 25
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9c 83       	std	Y+4, r25	; 0x04
    158c:	8b 83       	std	Y+3, r24	; 0x03
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <LCD_Init+0x372>
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	69 f7       	brne	.-38     	; 0x1586 <LCD_Init+0x366>
    15ac:	14 c0       	rjmp	.+40     	; 0x15d6 <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ae:	6f 81       	ldd	r22, Y+7	; 0x07
    15b0:	78 85       	ldd	r23, Y+8	; 0x08
    15b2:	89 85       	ldd	r24, Y+9	; 0x09
    15b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <LCD_Init+0x3ae>
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(LCD_CLEAR_COMMAND);
	_delay_ms(2);

#endif

}
    15d6:	e8 96       	adiw	r28, 0x38	; 56
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <LCD_SendCommand>:
void LCD_SendCommand(u8 command)
{    /* setting RS to low*/
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	2f 97       	sbiw	r28, 0x0f	; 15
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	8f 87       	std	Y+15, r24	; 0x0f
	SetPinValue(LCD_CTRL_PORT,RS_PIN,LOW);
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>

	/*setting RW to low for writing */
	SetPinValue(LCD_CTRL_PORT,RW_PIN,LOW);
    1608:	83 e0       	ldi	r24, 0x03	; 3
    160a:	62 e0       	ldi	r22, 0x02	; 2
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>

#if MODE ==8
	/* for sending command */
	SetPortValue(LCD_DATA_PORT,command);
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	6f 85       	ldd	r22, Y+15	; 0x0f
    1616:	0e 94 c2 08 	call	0x1184	; 0x1184 <SetPortValue>

	/*setting E to high*/
	SetPinValue(LCD_CTRL_PORT,E_PIN,HIGH);
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e4       	ldi	r27, 0x40	; 64
    162c:	8b 87       	std	Y+11, r24	; 0x0b
    162e:	9c 87       	std	Y+12, r25	; 0x0c
    1630:	ad 87       	std	Y+13, r26	; 0x0d
    1632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a e7       	ldi	r20, 0x7A	; 122
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	8f 83       	std	Y+7, r24	; 0x07
    164e:	98 87       	std	Y+8, r25	; 0x08
    1650:	a9 87       	std	Y+9, r26	; 0x09
    1652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1654:	6f 81       	ldd	r22, Y+7	; 0x07
    1656:	78 85       	ldd	r23, Y+8	; 0x08
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	9a 85       	ldd	r25, Y+10	; 0x0a
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <LCD_SendCommand+0x8e>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    1676:	6f 81       	ldd	r22, Y+7	; 0x07
    1678:	78 85       	ldd	r23, Y+8	; 0x08
    167a:	89 85       	ldd	r24, Y+9	; 0x09
    167c:	9a 85       	ldd	r25, Y+10	; 0x0a
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1690:	7c 85       	ldd	r23, Y+12	; 0x0c
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <LCD_SendCommand+0xee>
    16b8:	89 e1       	ldi	r24, 0x19	; 25
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_SendCommand+0xdc>
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <LCD_SendCommand+0xd0>
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_SendCommand+0x118>
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	/*Setting E to low*/
	SetPinValue(LCD_CTRL_PORT,E_PIN,LOW);
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>
	/*Setting E to low*/
	SetPinValue(LCD_CTRL_PORT,E_PIN,LOW);

#endif

}
    1712:	2f 96       	adiw	r28, 0x0f	; 15
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <LCD_SendData>:
void LCD_SendData(u16 data)
{    	/* setting RS to high*/
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	60 97       	sbiw	r28, 0x10	; 16
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	98 8b       	std	Y+16, r25	; 0x10
    173a:	8f 87       	std	Y+15, r24	; 0x0f
	SetPinValue(LCD_CTRL_PORT,RS_PIN,HIGH);
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>

	/*setting RW to low for writing */
	SetPinValue(LCD_CTRL_PORT,RW_PIN,LOW);
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>
#if MODE ==8
	/* for sending data */
	SetPortValue(LCD_DATA_PORT,data);
    1750:	9f 85       	ldd	r25, Y+15	; 0x0f
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	69 2f       	mov	r22, r25
    1756:	0e 94 c2 08 	call	0x1184	; 0x1184 <SetPortValue>

	/*setting E to high*/
	SetPinValue(LCD_CTRL_PORT,E_PIN,HIGH);
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e0       	ldi	r26, 0x00	; 0
    176a:	b0 e4       	ldi	r27, 0x40	; 64
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a e7       	ldi	r20, 0x7A	; 122
    1782:	53 e4       	ldi	r21, 0x43	; 67
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <LCD_SendData+0x92>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <LCD_SendData+0x110>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <LCD_SendData+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <LCD_SendData+0xf2>
    17f8:	89 e1       	ldi	r24, 0x19	; 25
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_SendData+0xe0>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <LCD_SendData+0xd4>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <LCD_SendData+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <LCD_SendData+0x11c>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	SetPinValue(LCD_CTRL_PORT,E_PIN,LOW);
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>
	_delay_ms(2);
	/*Setting E to low*/
	SetPinValue(LCD_CTRL_PORT,E_PIN,LOW);

#endif
}
    1852:	60 96       	adiw	r28, 0x10	; 16
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <LCD_SendString>:
void LCD_SendString(const char  *string)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <LCD_SendString+0x6>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9b 83       	std	Y+3, r25	; 0x03
    1872:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    1874:	19 82       	std	Y+1, r1	; 0x01
    1876:	10 c0       	rjmp	.+32     	; 0x1898 <LCD_SendString+0x34>
	while(string[Counter] != '\0')
	{
		LCD_SendData(string[Counter]);
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	fc 01       	movw	r30, r24
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	80 81       	ld	r24, Z
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_SendData>
		Counter++;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void LCD_SendString(const char  *string)
{
	u8 Counter=0;
	while(string[Counter] != '\0')
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	fc 01       	movw	r30, r24
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	29 f7       	brne	.-54     	; 0x1878 <LCD_SendString+0x14>
		Counter++;
	}



}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <LCD_Clear>:

void LCD_Clear()
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_SendCommand>


}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <LCD_IntToString>:
void LCD_IntToString(u16 integer)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	66 97       	sbiw	r28, 0x16	; 22
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	9e 8b       	std	Y+22, r25	; 0x16
    18e4:	8d 8b       	std	Y+21, r24	; 0x15
	u8 buffer[20];
	itoa(integer,buffer,10);
    18e6:	8d 89       	ldd	r24, Y+21	; 0x15
    18e8:	9e 89       	ldd	r25, Y+22	; 0x16
    18ea:	9e 01       	movw	r18, r28
    18ec:	2f 5f       	subi	r18, 0xFF	; 255
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	b9 01       	movw	r22, r18
    18f2:	4a e0       	ldi	r20, 0x0A	; 10
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	0e 94 0b 10 	call	0x2016	; 0x2016 <itoa>
	LCD_SendString(buffer);
    18fa:	ce 01       	movw	r24, r28
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_SendString>

}
    1902:	66 96       	adiw	r28, 0x16	; 22
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <LCD_moveCursor>:


void LCD_moveCursor(u8 row,u8 col)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <LCD_moveCursor+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <LCD_moveCursor+0x8>
    191c:	0f 92       	push	r0
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3d 83       	std	Y+5, r19	; 0x05
    192e:	2c 83       	std	Y+4, r18	; 0x04
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	31 f0       	breq	.+12     	; 0x1944 <LCD_moveCursor+0x30>
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	21 30       	cpi	r18, 0x01	; 1
    193e:	31 05       	cpc	r19, r1
    1940:	21 f0       	breq	.+8      	; 0x194a <LCD_moveCursor+0x36>
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <LCD_moveCursor+0x3c>
	{
	case 0:
		lcd_memory_address=col;
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <LCD_moveCursor+0x3c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	80 5c       	subi	r24, 0xC0	; 192
    194e:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	/* Move the LCD cursor to this specific address */
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	80 68       	ori	r24, 0x80	; 128
    1954:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_SendCommand>
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <TIMER1_init>:
#include "BIT_MATH.h"
#include "TIMER1.h"

static void (*pvIcuCallBack)(void)=NULL_PTR;
void TIMER1_init()
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
	/*Setting Prescaler to 8 */
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1970:	ae e4       	ldi	r26, 0x4E	; 78
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ee e4       	ldi	r30, 0x4E	; 78
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	82 60       	ori	r24, 0x02	; 2
    197c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    197e:	ae e4       	ldi	r26, 0x4E	; 78
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ee e4       	ldi	r30, 0x4E	; 78
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8b 7f       	andi	r24, 0xFB	; 251
    198a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    198c:	ae e4       	ldi	r26, 0x4E	; 78
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ee e4       	ldi	r30, 0x4E	; 78
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8e 7f       	andi	r24, 0xFE	; 254
    1998:	8c 93       	st	X, r24


	/*Choosing OverFlow mode*/
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    199a:	ae e4       	ldi	r26, 0x4E	; 78
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ee e4       	ldi	r30, 0x4E	; 78
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	87 7f       	andi	r24, 0xF7	; 247
    19a6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    19a8:	ae e4       	ldi	r26, 0x4E	; 78
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ee e4       	ldi	r30, 0x4E	; 78
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7e       	andi	r24, 0xEF	; 239
    19b4:	8c 93       	st	X, r24

	/*Enabling ICU interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    19b6:	a9 e5       	ldi	r26, 0x59	; 89
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 62       	ori	r24, 0x20	; 32
    19c2:	8c 93       	st	X, r24
	/*Clearing Registers*/
	TCNT1=0;
    19c4:	ec e4       	ldi	r30, 0x4C	; 76
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	11 82       	std	Z+1, r1	; 0x01
    19ca:	10 82       	st	Z, r1
	ICR1=0;
    19cc:	e6 e4       	ldi	r30, 0x46	; 70
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	11 82       	std	Z+1, r1	; 0x01
    19d2:	10 82       	st	Z, r1

}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <TIMER1_IcuEdgeSelect>:
void TIMER1_IcuEdgeSelect(u8 Edge)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01
	if(Edge == FALLING_EDGE)
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	41 f4       	brne	.+16     	; 0x19fc <TIMER1_IcuEdgeSelect+0x22>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    19ec:	ae e4       	ldi	r26, 0x4E	; 78
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ee e4       	ldi	r30, 0x4E	; 78
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	8f 7b       	andi	r24, 0xBF	; 191
    19f8:	8c 93       	st	X, r24
    19fa:	0a c0       	rjmp	.+20     	; 0x1a10 <TIMER1_IcuEdgeSelect+0x36>
	}
	else if(Edge == RISING_EDGE)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 23       	and	r24, r24
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <TIMER1_IcuEdgeSelect+0x36>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1a02:	ae e4       	ldi	r26, 0x4E	; 78
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ee e4       	ldi	r30, 0x4E	; 78
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 64       	ori	r24, 0x40	; 64
    1a0e:	8c 93       	st	X, r24

	}
}
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <TIMER1_IcuReading>:
u16  TIMER1_IcuReading(void)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1a20:	e6 e4       	ldi	r30, 0x46	; 70
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <TIMER1_IcuSetCallBack>:

void TIMER1_IcuSetCallBack(void (*ptr)(void))
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <TIMER1_IcuSetCallBack+0x6>
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	pvIcuCallBack=ptr;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	90 93 79 00 	sts	0x0079, r25
    1a44:	80 93 78 00 	sts	0x0078, r24
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <Ultrasonic_DistanceMeasured>:

u16 Distance=0;


u16 Ultrasonic_DistanceMeasured()
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <Ultrasonic_DistanceMeasured+0x6>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	/*if the Ultrasonic sends two pulses then we are ready to read the distance */
	if(EdgeCounter ==2)
    1a5c:	80 91 7c 00 	lds	r24, 0x007C
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	d1 f4       	brne	.+52     	; 0x1a98 <Ultrasonic_DistanceMeasured+0x46>
	{
		Distance=1+(FallingEdgeTime /58);
    1a64:	80 91 7a 00 	lds	r24, 0x007A
    1a68:	90 91 7b 00 	lds	r25, 0x007B
    1a6c:	2a e3       	ldi	r18, 0x3A	; 58
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	b9 01       	movw	r22, r18
    1a72:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
    1a76:	cb 01       	movw	r24, r22
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	90 93 7e 00 	sts	0x007E, r25
    1a7e:	80 93 7d 00 	sts	0x007D, r24
		EdgeCounter=0;
    1a82:	10 92 7c 00 	sts	0x007C, r1
		return Distance;
    1a86:	80 91 7d 00 	lds	r24, 0x007D
    1a8a:	90 91 7e 00 	lds	r25, 0x007E
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	00 c0       	rjmp	.+0      	; 0x1a98 <Ultrasonic_DistanceMeasured+0x46>
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <Ultrasonic_CallBackFunction>:
void Ultrasonic_CallBackFunction()
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
	EdgeCounter++;
    1aaa:	80 91 7c 00 	lds	r24, 0x007C
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	80 93 7c 00 	sts	0x007C, r24
	if(EdgeCounter ==1)
    1ab4:	80 91 7c 00 	lds	r24, 0x007C
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	39 f4       	brne	.+14     	; 0x1aca <Ultrasonic_CallBackFunction+0x28>
	{
		/*clearing the timer*/
		TCNT1 =0;
    1abc:	ec e4       	ldi	r30, 0x4C	; 76
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	11 82       	std	Z+1, r1	; 0x01
    1ac2:	10 82       	st	Z, r1
		/*make the icu trigger at falling edge*/
		ICU_EdgeSelect(FALLING_EDGE);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <ICU_EdgeSelect>

	}

	if(EdgeCounter ==2)
    1aca:	80 91 7c 00 	lds	r24, 0x007C
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	49 f4       	brne	.+18     	; 0x1ae4 <Ultrasonic_CallBackFunction+0x42>
	{
		/*read the ICU register*/
		FallingEdgeTime =ICU_Reading();
    1ad2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ICU_Reading>
    1ad6:	90 93 7b 00 	sts	0x007B, r25
    1ada:	80 93 7a 00 	sts	0x007A, r24
		/*make the ICU trigger at falling edge*/
		ICU_EdgeSelect(RISING_EDGE);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <ICU_EdgeSelect>

	}
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <Ultrasonic_Trigger>:
void Ultrasonic_Trigger()
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	68 97       	sbiw	r28, 0x18	; 24
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
	/*create a pulse with 10 us width*/
	SetPinValue(ULTRASONIC_PORT,ULTRASONIC_PIN,HIGH);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e2       	ldi	r26, 0x20	; 32
    1b0e:	b1 e4       	ldi	r27, 0x41	; 65
    1b10:	8d 8b       	std	Y+21, r24	; 0x15
    1b12:	9e 8b       	std	Y+22, r25	; 0x16
    1b14:	af 8b       	std	Y+23, r26	; 0x17
    1b16:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	2b ea       	ldi	r18, 0xAB	; 171
    1b22:	3a ea       	ldi	r19, 0xAA	; 170
    1b24:	4a ea       	ldi	r20, 0xAA	; 170
    1b26:	5e e3       	ldi	r21, 0x3E	; 62
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	89 8b       	std	Y+17, r24	; 0x11
    1b32:	9a 8b       	std	Y+18, r25	; 0x12
    1b34:	ab 8b       	std	Y+19, r26	; 0x13
    1b36:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b38:	69 89       	ldd	r22, Y+17	; 0x11
    1b3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	1c f4       	brge	.+6      	; 0x1b56 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	88 8b       	std	Y+16, r24	; 0x10
    1b54:	91 c0       	rjmp	.+290    	; 0x1c78 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1b56:	69 89       	ldd	r22, Y+17	; 0x11
    1b58:	7a 89       	ldd	r23, Y+18	; 0x12
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	53 e4       	ldi	r21, 0x43	; 67
    1b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	0c f0       	brlt	.+2      	; 0x1b70 <Ultrasonic_Trigger+0x86>
    1b6e:	7b c0       	rjmp	.+246    	; 0x1c66 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1b70:	6d 89       	ldd	r22, Y+21	; 0x15
    1b72:	7e 89       	ldd	r23, Y+22	; 0x16
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	54 e4       	ldi	r21, 0x44	; 68
    1b80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8c 87       	std	Y+12, r24	; 0x0c
    1b8a:	9d 87       	std	Y+13, r25	; 0x0d
    1b8c:	ae 87       	std	Y+14, r26	; 0x0e
    1b8e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b92:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a e7       	ldi	r20, 0x7A	; 122
    1b9e:	53 e4       	ldi	r21, 0x43	; 67
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	88 87       	std	Y+8, r24	; 0x08
    1baa:	99 87       	std	Y+9, r25	; 0x09
    1bac:	aa 87       	std	Y+10, r26	; 0x0a
    1bae:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bb0:	68 85       	ldd	r22, Y+8	; 0x08
    1bb2:	79 85       	ldd	r23, Y+9	; 0x09
    1bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9f 83       	std	Y+7, r25	; 0x07
    1bce:	8e 83       	std	Y+6, r24	; 0x06
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1bd2:	68 85       	ldd	r22, Y+8	; 0x08
    1bd4:	79 85       	ldd	r23, Y+9	; 0x09
    1bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bec:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9f 83       	std	Y+7, r25	; 0x07
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <Ultrasonic_Trigger+0x148>
    1c14:	89 e1       	ldi	r24, 0x19	; 25
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9d 83       	std	Y+5, r25	; 0x05
    1c1a:	8c 83       	std	Y+4, r24	; 0x04
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <Ultrasonic_Trigger+0x136>
    1c24:	9d 83       	std	Y+5, r25	; 0x05
    1c26:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9f 83       	std	Y+7, r25	; 0x07
    1c30:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8e 81       	ldd	r24, Y+6	; 0x06
    1c34:	9f 81       	ldd	r25, Y+7	; 0x07
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <Ultrasonic_Trigger+0x12a>
    1c3a:	24 c0       	rjmp	.+72     	; 0x1c84 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	68 85       	ldd	r22, Y+8	; 0x08
    1c3e:	79 85       	ldd	r23, Y+9	; 0x09
    1c40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9f 83       	std	Y+7, r25	; 0x07
    1c4e:	8e 83       	std	Y+6, r24	; 0x06
    1c50:	8e 81       	ldd	r24, Y+6	; 0x06
    1c52:	9f 81       	ldd	r25, Y+7	; 0x07
    1c54:	9b 83       	std	Y+3, r25	; 0x03
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <Ultrasonic_Trigger+0x172>
    1c60:	9b 83       	std	Y+3, r25	; 0x03
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c66:	69 89       	ldd	r22, Y+17	; 0x11
    1c68:	7a 89       	ldd	r23, Y+18	; 0x12
    1c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	88 8b       	std	Y+16, r24	; 0x10
    1c78:	88 89       	ldd	r24, Y+16	; 0x10
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	8a 95       	dec	r24
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <Ultrasonic_Trigger+0x194>
    1c82:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	SetPinValue(ULTRASONIC_PORT,ULTRASONIC_PIN,LOW);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 af 07 	call	0xf5e	; 0xf5e <SetPinValue>


}
    1c8e:	68 96       	adiw	r28, 0x18	; 24
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <ICU_Init>:
#include "icu.h"
#include "BIT_MATH.h"
static void (*pvIcuCallBack)(void)=NULL_PTR;

void ICU_Init()
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
		/*Setting Prescaler to 8 */
		SET_BIT(TCCR1B,TCCR1B_CS11);
    1ca8:	ae e4       	ldi	r26, 0x4E	; 78
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ee e4       	ldi	r30, 0x4E	; 78
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	82 60       	ori	r24, 0x02	; 2
    1cb4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    1cb6:	ae e4       	ldi	r26, 0x4E	; 78
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	8b 7f       	andi	r24, 0xFB	; 251
    1cc2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    1cc4:	ae e4       	ldi	r26, 0x4E	; 78
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ee e4       	ldi	r30, 0x4E	; 78
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8e 7f       	andi	r24, 0xFE	; 254
    1cd0:	8c 93       	st	X, r24


		/*Choosing OverFlow mode*/
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1cd2:	ae e4       	ldi	r26, 0x4E	; 78
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	ee e4       	ldi	r30, 0x4E	; 78
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	87 7f       	andi	r24, 0xF7	; 247
    1cde:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1ce0:	ae e4       	ldi	r26, 0x4E	; 78
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	ee e4       	ldi	r30, 0x4E	; 78
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7e       	andi	r24, 0xEF	; 239
    1cec:	8c 93       	st	X, r24

		/*Enabling ICU interrupt*/
		SET_BIT(TIMSK,TIMSK_TICIE1);
    1cee:	a9 e5       	ldi	r26, 0x59	; 89
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e9 e5       	ldi	r30, 0x59	; 89
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 62       	ori	r24, 0x20	; 32
    1cfa:	8c 93       	st	X, r24
		/*Clearing Registers*/
		TCNT1=0;
    1cfc:	ec e4       	ldi	r30, 0x4C	; 76
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	11 82       	std	Z+1, r1	; 0x01
    1d02:	10 82       	st	Z, r1
		ICR1=0;
    1d04:	e6 e4       	ldi	r30, 0x46	; 70
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	11 82       	std	Z+1, r1	; 0x01
    1d0a:	10 82       	st	Z, r1

}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <ICU_EdgeSelect>:
void ICU_EdgeSelect(u8 Edge)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <ICU_EdgeSelect+0x6>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	switch(Edge)
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	3b 83       	std	Y+3, r19	; 0x03
    1d28:	2a 83       	std	Y+2, r18	; 0x02
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f0       	breq	.+26     	; 0x1d4c <ICU_EdgeSelect+0x3a>
    1d32:	2a 81       	ldd	r18, Y+2	; 0x02
    1d34:	3b 81       	ldd	r19, Y+3	; 0x03
    1d36:	21 30       	cpi	r18, 0x01	; 1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	79 f4       	brne	.+30     	; 0x1d5a <ICU_EdgeSelect+0x48>
	{
	case(FALLING_EDGE):	CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    1d3c:	ae e4       	ldi	r26, 0x4E	; 78
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ee e4       	ldi	r30, 0x4E	; 78
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 7b       	andi	r24, 0xBF	; 191
    1d48:	8c 93       	st	X, r24
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <ICU_EdgeSelect+0x48>
	case(RISING_EDGE) : SET_BIT(TCCR1B,TCCR1B_ICES1); break;
    1d4c:	ae e4       	ldi	r26, 0x4E	; 78
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ee e4       	ldi	r30, 0x4E	; 78
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	80 64       	ori	r24, 0x40	; 64
    1d58:	8c 93       	st	X, r24
	default:break;
	}
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <ICU_Reading>:
u16  ICU_Reading(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1d6e:	e6 e4       	ldi	r30, 0x46	; 70
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <ICU_SetCallBack>:
void ICU_SetCallBack(void (*ptr)(void))
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <ICU_SetCallBack+0x6>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01

	pvIcuCallBack=ptr;
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	90 93 80 00 	sts	0x0080, r25
    1d92:	80 93 7f 00 	sts	0x007F, r24
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    1da0:	1f 92       	push	r1
    1da2:	0f 92       	push	r0
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	0f 92       	push	r0
    1da8:	11 24       	eor	r1, r1
    1daa:	2f 93       	push	r18
    1dac:	3f 93       	push	r19
    1dae:	4f 93       	push	r20
    1db0:	5f 93       	push	r21
    1db2:	6f 93       	push	r22
    1db4:	7f 93       	push	r23
    1db6:	8f 93       	push	r24
    1db8:	9f 93       	push	r25
    1dba:	af 93       	push	r26
    1dbc:	bf 93       	push	r27
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	if(pvIcuCallBack !=NULL_PTR)
    1dca:	80 91 7f 00 	lds	r24, 0x007F
    1dce:	90 91 80 00 	lds	r25, 0x0080
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	29 f0       	breq	.+10     	; 0x1de0 <__vector_6+0x40>
	{
		pvIcuCallBack();
    1dd6:	e0 91 7f 00 	lds	r30, 0x007F
    1dda:	f0 91 80 00 	lds	r31, 0x0080
    1dde:	09 95       	icall
	}
	else
	{

	}
}
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	ff 91       	pop	r31
    1de6:	ef 91       	pop	r30
    1de8:	bf 91       	pop	r27
    1dea:	af 91       	pop	r26
    1dec:	9f 91       	pop	r25
    1dee:	8f 91       	pop	r24
    1df0:	7f 91       	pop	r23
    1df2:	6f 91       	pop	r22
    1df4:	5f 91       	pop	r21
    1df6:	4f 91       	pop	r20
    1df8:	3f 91       	pop	r19
    1dfa:	2f 91       	pop	r18
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <main>:




void main()
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	60 97       	sbiw	r28, 0x10	; 16
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
	u16 Distance=0;
    1e1a:	18 8a       	std	Y+16, r1	; 0x10
    1e1c:	1f 86       	std	Y+15, r1	; 0x0f
	/*Setting the directions of LCD and ICU pins*/
	SetPortDirection(LCD_DATA_PORT,0xff);
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	6f ef       	ldi	r22, 0xFF	; 255
    1e22:	0e 94 62 07 	call	0xec4	; 0xec4 <SetPortDirection>
	SetPinDirection(LCD_CTRL_PORT,E_PIN,OUTPUT);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SetPinDirection>
	SetPinDirection(LCD_CTRL_PORT,RS_PIN,OUTPUT);
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SetPinDirection>
	SetPinDirection(DIO_PORTD,PIN6,INPUT);
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	66 e0       	ldi	r22, 0x06	; 6
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SetPinDirection>
	SetPinDirection(ULTRASONIC_PORT,ULTRASONIC_PIN,OUTPUT);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SetPinDirection>
	/*Enabling global interrupt*/
	SET_BIT(SREG,SREG_I);
    1e4e:	af e5       	ldi	r26, 0x5F	; 95
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ef e5       	ldi	r30, 0x5F	; 95
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	80 68       	ori	r24, 0x80	; 128
    1e5a:	8c 93       	st	X, r24

	/*Initializing LCD and ICU*/
	ICU_Init();
    1e5c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <ICU_Init>
	LCD_Init();
    1e60:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_Init>

	ICU_SetCallBack(&Ultrasonic_CallBackFunction);
    1e64:	81 e5       	ldi	r24, 0x51	; 81
    1e66:	9d e0       	ldi	r25, 0x0D	; 13
    1e68:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <ICU_SetCallBack>
	ICU_EdgeSelect(RISING_EDGE);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <ICU_EdgeSelect>


	while(1)
	{	/*Sending the pulse to he ultrasonic*/
		Ultrasonic_Trigger();
    1e72:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Ultrasonic_Trigger>

		Distance =Ultrasonic_DistanceMeasured();
    1e76:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Ultrasonic_DistanceMeasured>
    1e7a:	98 8b       	std	Y+16, r25	; 0x10
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_SendString(" Distance =");
    1e7e:	80 e6       	ldi	r24, 0x60	; 96
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_SendString>
		LCD_IntToString(Distance);
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	98 89       	ldd	r25, Y+16	; 0x10
    1e8a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_IntToString>
		LCD_SendString(" Cm");
    1e8e:	8c e6       	ldi	r24, 0x6C	; 108
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_SendString>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	aa e7       	ldi	r26, 0x7A	; 122
    1e9c:	b4 e4       	ldi	r27, 0x44	; 68
    1e9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ea0:	9c 87       	std	Y+12, r25	; 0x0c
    1ea2:	ad 87       	std	Y+13, r26	; 0x0d
    1ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a e7       	ldi	r20, 0x7A	; 122
    1eb4:	53 e4       	ldi	r21, 0x43	; 67
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8f 83       	std	Y+7, r24	; 0x07
    1ec0:	98 87       	std	Y+8, r25	; 0x08
    1ec2:	a9 87       	std	Y+9, r26	; 0x09
    1ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <main+0xe2>
		__ticks = 1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <main+0x160>
	else if (__tmp > 65535)
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	4c f5       	brge	.+82     	; 0x1f52 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <main+0x142>
    1f2a:	89 e1       	ldi	r24, 0x19	; 25
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <main+0x130>
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <main+0x124>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <main+0x16c>
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_Clear();
    1f7a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_Clear>
    1f7e:	79 cf       	rjmp	.-270    	; 0x1e72 <main+0x6c>

00001f80 <__udivmodhi4>:
    1f80:	aa 1b       	sub	r26, r26
    1f82:	bb 1b       	sub	r27, r27
    1f84:	51 e1       	ldi	r21, 0x11	; 17
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <__udivmodhi4_ep>

00001f88 <__udivmodhi4_loop>:
    1f88:	aa 1f       	adc	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	a6 17       	cp	r26, r22
    1f8e:	b7 07       	cpc	r27, r23
    1f90:	10 f0       	brcs	.+4      	; 0x1f96 <__udivmodhi4_ep>
    1f92:	a6 1b       	sub	r26, r22
    1f94:	b7 0b       	sbc	r27, r23

00001f96 <__udivmodhi4_ep>:
    1f96:	88 1f       	adc	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	5a 95       	dec	r21
    1f9c:	a9 f7       	brne	.-22     	; 0x1f88 <__udivmodhi4_loop>
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	08 95       	ret

00001fa8 <__prologue_saves__>:
    1fa8:	2f 92       	push	r2
    1faa:	3f 92       	push	r3
    1fac:	4f 92       	push	r4
    1fae:	5f 92       	push	r5
    1fb0:	6f 92       	push	r6
    1fb2:	7f 92       	push	r7
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	ca 1b       	sub	r28, r26
    1fd2:	db 0b       	sbc	r29, r27
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	09 94       	ijmp

00001fe0 <__epilogue_restores__>:
    1fe0:	2a 88       	ldd	r2, Y+18	; 0x12
    1fe2:	39 88       	ldd	r3, Y+17	; 0x11
    1fe4:	48 88       	ldd	r4, Y+16	; 0x10
    1fe6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ff0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ff2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff6:	df 80       	ldd	r13, Y+7	; 0x07
    1ff8:	ee 80       	ldd	r14, Y+6	; 0x06
    1ffa:	fd 80       	ldd	r15, Y+5	; 0x05
    1ffc:	0c 81       	ldd	r16, Y+4	; 0x04
    1ffe:	1b 81       	ldd	r17, Y+3	; 0x03
    2000:	aa 81       	ldd	r26, Y+2	; 0x02
    2002:	b9 81       	ldd	r27, Y+1	; 0x01
    2004:	ce 0f       	add	r28, r30
    2006:	d1 1d       	adc	r29, r1
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	ed 01       	movw	r28, r26
    2014:	08 95       	ret

00002016 <itoa>:
    2016:	fb 01       	movw	r30, r22
    2018:	9f 01       	movw	r18, r30
    201a:	e8 94       	clt
    201c:	42 30       	cpi	r20, 0x02	; 2
    201e:	c4 f0       	brlt	.+48     	; 0x2050 <itoa+0x3a>
    2020:	45 32       	cpi	r20, 0x25	; 37
    2022:	b4 f4       	brge	.+44     	; 0x2050 <itoa+0x3a>
    2024:	4a 30       	cpi	r20, 0x0A	; 10
    2026:	29 f4       	brne	.+10     	; 0x2032 <itoa+0x1c>
    2028:	97 fb       	bst	r25, 7
    202a:	1e f4       	brtc	.+6      	; 0x2032 <itoa+0x1c>
    202c:	90 95       	com	r25
    202e:	81 95       	neg	r24
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	64 2f       	mov	r22, r20
    2034:	77 27       	eor	r23, r23
    2036:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
    203a:	80 5d       	subi	r24, 0xD0	; 208
    203c:	8a 33       	cpi	r24, 0x3A	; 58
    203e:	0c f0       	brlt	.+2      	; 0x2042 <itoa+0x2c>
    2040:	89 5d       	subi	r24, 0xD9	; 217
    2042:	81 93       	st	Z+, r24
    2044:	cb 01       	movw	r24, r22
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	a1 f7       	brne	.-24     	; 0x2032 <itoa+0x1c>
    204a:	16 f4       	brtc	.+4      	; 0x2050 <itoa+0x3a>
    204c:	5d e2       	ldi	r21, 0x2D	; 45
    204e:	51 93       	st	Z+, r21
    2050:	10 82       	st	Z, r1
    2052:	c9 01       	movw	r24, r18
    2054:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <strrev>

00002058 <strrev>:
    2058:	dc 01       	movw	r26, r24
    205a:	fc 01       	movw	r30, r24
    205c:	67 2f       	mov	r22, r23
    205e:	71 91       	ld	r23, Z+
    2060:	77 23       	and	r23, r23
    2062:	e1 f7       	brne	.-8      	; 0x205c <strrev+0x4>
    2064:	32 97       	sbiw	r30, 0x02	; 2
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <strrev+0x18>
    2068:	7c 91       	ld	r23, X
    206a:	6d 93       	st	X+, r22
    206c:	70 83       	st	Z, r23
    206e:	62 91       	ld	r22, -Z
    2070:	ae 17       	cp	r26, r30
    2072:	bf 07       	cpc	r27, r31
    2074:	c8 f3       	brcs	.-14     	; 0x2068 <strrev+0x10>
    2076:	08 95       	ret

00002078 <_exit>:
    2078:	f8 94       	cli

0000207a <__stop_program>:
    207a:	ff cf       	rjmp	.-2      	; 0x207a <__stop_program>
